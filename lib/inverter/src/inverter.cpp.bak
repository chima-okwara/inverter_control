////////////////////////////////////////////////////////////////////////////////////////////////////
//*FILE NAME:       inverter.cpp
//*FILE DESC:       Source file for inverfer_control library.
//*FILE VERSION:    0.1.1
//*FILE AUTHOR:     Chimaroke Okwara (chima-okwara)
//*LAST MODIFIED:   Friday, 15 March, 2024
//*LICENSE:         GNU LGPL v2.1
////////////////////////////////////////////////////////////////////////////////////////////////////
#include <Arduino.h>
//#include <Buzzer.h>
#include <inverter.h>

//HardwareTimer *timer = new HardwareTimer(TIM2);
//
////LiquidCrystal_I2C lcd (0x27, 16, 2);
//volatile float voltage {}, current {}, temperature {};
//volatile bool UVP {}, OCP {}, OTP {}, INV {}, BZ {},
//      s1 {}, s2 {}, s3 {}, s4 {};

//Buzzer buzzer(buzzerpin);

void setTimer()
{
    //Configure timer:
    timer->setOverflow(5 * 1000000, MICROSEC_FORMAT);

    // Attach the interrupt
    timer->attachInterrupt(timerInterrupt);

    // Start the timer
    timer->resume();
}


void timerInterrupt()
{
    digitalWrite(PC13, !(digitalRead(PC13)));

    //check battery voltage, current, and system temperature.
    measureVIT();
    UVP = (voltage <= VTH) ? true : false;
    OCP = (current >= ITH) ? true : false;
    OTP = (temperature >= TTH) ? true : false;

    //set values of BZ and INV, which control the buzzer and inverter
    INV = (!UVP && !OCP && !OTP) || (over);
    BZ = (UVP || OCP || OTP);

    digitalWrite(invSw, (INV ? LOW : (over ? LOW : HIGH) ) );

    if(BZ)
    {
//        buzzer.sound(NOTE_A2, 3);
        tone(buzzerpin, 10000, 1000);
    }

    displayVIT();

}

void init()
{
    setTimer();
    analogReadResolution(12);
    pinMode(sw1, INPUT_PULLUP);
    pinMode(sw2, INPUT_PULLUP);
    pinMode(sw3, INPUT_PULLUP);
    pinMode(sw4, INPUT_PULLUP);
    pinMode(buzzerpin, OUTPUT);
    analogWrite(buzzerpin, 0);

    pinMode(iSense, INPUT_ANALOG);
    pinMode(vSense, INPUT_ANALOG);
    pinMode(tSense, INPUT_ANALOG);

    pinMode(fan, OUTPUT);



    digitalWrite(invSw, HIGH);  //Turn off inverter
    //Set LCD:


    lcd.clear();
//    lcd.backlight();
//
    lcd.home();
    lcd.print("Init Done.");
    delay(500);
    lcd.clear();
//    lcd.setCursor(0, 1);
//    lcd.print("**200W Inverter**");
//    delay(1000);
//    buzzer.sound(NOTE_A2, 1000);
    tone(buzzerpin, 10000, 1000);
    attachInterrupt(sw1, sw1Pressed, RISING);
    attachInterrupt(sw2, sw2Pressed, RISING);
    s1 = false;
    s2 = false;

    disp();
}

const float &readCurrent()
{
    static float value = (analogRead(iSense) / 4095.0) * 3.3;
    value /= 100.0;
    return (value); //100 is the sensitivity of the 20A current sensor. Value returned is in Amperes.
}

const float &readVoltage()
{
    static float value = (analogRead(vSense) / 4095.0) * 3.3;
    value = value * ((R1 + R2) / R2);
    return (value);
}

const float &readTemperature()
{
    static float value = (analogRead(iSense) / 4095.0) * 3.3;
    value = (value * 1000.0) / 10.0;
    return value; //Where 10 is the sensor gain.
}

void measureVIT()
{
    voltage = readVoltage();
    current = readCurrent();
    temperature = readTemperature();
}

void displayVIT()
{
    disp();
    dtostrf(voltage, 2, 0, volstr);
    dtostrf(current, 2, 0, curstr);
    dtostrf(temperature, 2, 0, temstr);

    lcd.setCursor(3, 0);
    lcd.print(volstr);
    lcd.setCursor(11, 0);
    lcd.print(curstr);
    lcd.setCursor(3, 1);
    lcd.print(temstr);
    lcd.setCursor(11, 1);
    lcd.print( ( (INV) ? "ON" : "OFF" ) );
}

void sw1Pressed()
{
    s1 = true;
}

void sw2Pressed()
{
    s2 = true;
}

void disp()
{
    lcd.clear();
    lcd.home();
    lcd.print("Vo:    |Cu:    ");
    lcd.print("Te:    |St:    ");
}
